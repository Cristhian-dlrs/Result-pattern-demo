version: "3.8"

services:
  techdemo-api:
    container_name: techdemo-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERILOG__USING__0=Serilog.Sinks.Console
      - SERILOG__USING__1=Serilog.Sinks.File
      - SERILOG__MINIMUMLEVEL__DEFAULT=Information
      - SERILOG__MINIMUMLEVEL__OVERRIDE__Microsoft=Warning
      - SERILOG__MINIMUMLEVEL__OVERRIDE__System=Warning
      - SERILOG__WRITETO__0__NAME=Console
      - SERILOG__WRITETO__1__NAME=Elasticsearch
      - SERILOG__WRITETO__1__ARGS__nodeUris=http://elasticsearch:9200
      - SERILOG__WRITETO__1__ARGS__indexFormat=logs-{0:yyyy.MM.dd}
      - SERILOG__WRITETO__1__ARGS__autoRegisterTemplate=true
      - SERILOG__ENRICH__0=FromLogContext
      - SERILOG__ENRICH__1=WithMachineName
      - SERILOG__ENRICH__2=WithThreadId
      - KafkaOptions__BootstrapServers=kafka:29092
      - KafkaOptions__DefaultGroupId=permissions
      - KafkaOptions__DefaultTopic=permissions
      - KafkaOptions__AllowAutoCreateTopics=true
      - KafkaOptions__PartitionsNumber=1
      - KafkaOptions__ReplicationFactor=1
      - KafkaOptions__BatchSize=25
      - ElasticSearchOptions__Url=http://elasticsearch:9200
      - ElasticSearchOptions__DefaultIndex=permissions
      - ElasticSearchOptions__DefaultResultNumber=25
      - SqlServerOptions__ConnectionString=Server=sqlserver,1433;Database=TechDemoDb;User Id=sa;Password=devP@ss123;TrustServerCertificate=True
    restart: always
    networks:
      - app-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "devP@ss123"
    restart: always
    ports:
      - 1433:1433
    volumes:
      - sql-server-data:/var/opt/mssql
    networks:
      - app-network

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    restart: always
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      start_period: 10s
      interval: 2s
      retries: 20
      timeout: 5s

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.7.1
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    restart: always
    networks:
      - app-network
    depends_on:
      - elasticsearch

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    restart: always
    volumes:
      - zookeeper_data:/data
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: always
    volumes:
      - kafka-data:/kafka
    depends_on:
      - zookeeper
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics --bootstrap-server localhost:9092 --list || exit 1",
        ]
      start_period: 10s
      interval: 2s
      retries: 15
      timeout: 5s

volumes:
  sql-server-data:
  elasticsearch-data:
  kafka-data:
  zookeeper_data:

networks:
  app-network:
    driver: bridge
